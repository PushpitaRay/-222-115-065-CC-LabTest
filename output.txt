Keyword: int
Function: main
Symbol: (
Symbol: )
Symbol: {
Keyword: int
Identifier: i
Symbol: ,
Identifier: j
Symbol: ,
Identifier: isPrime
Symbol: ,
Identifier: sum
Operator: =
Number: 0
Symbol: ;
Keyword: for
Symbol: (
Identifier: i
Operator: =
Number: 2
Symbol: ;
Identifier: i
Unknown: <
Operator: =
Number: 100
Symbol: ;
Identifier: i
Operator: +
Operator: +
Symbol: )
Symbol: {
Identifier: isPrime
Operator: =
Number: 1
Symbol: ;
Operator: /
Operator: /
Identifier: Assume
Identifier: i
Identifier: is
Identifier: prime
Keyword: for
Symbol: (
Identifier: j
Operator: =
Number: 2
Symbol: ;
Identifier: j
Unknown: <
Operator: =
Identifier: i
Operator: /
Number: 2
Symbol: ;
Identifier: j
Operator: +
Operator: +
Symbol: )
Symbol: {
Keyword: if
Symbol: (
Identifier: i
Operator: %
Identifier: j
Operator: ==
Number: 0
Symbol: )
Symbol: {
Identifier: isPrime
Operator: =
Number: 0
Symbol: ;
Operator: /
Operator: /
Identifier: i
Identifier: is
Identifier: divisible
Identifier: by
Identifier: j
Symbol: ,
Identifier: not
Identifier: prime
Keyword: break
Symbol: ;
Symbol: }
Symbol: }
Keyword: if
Symbol: (
Identifier: isPrime
Symbol: )
Symbol: {
Identifier: sum
Operator: +
Operator: =
Identifier: i
Symbol: ;
Symbol: }
Symbol: }
Function: printf
Symbol: (
Unknown: "
Identifier: Sum
Identifier: of
Identifier: all
Identifier: prime
Identifier: numbers
Identifier: between
Number: 1
Identifier: and
Number: 100
Identifier: is
Unknown: :
Operator: %
Identifier: d
Unknown: \
Identifier: n
Unknown: "
Symbol: ,
Identifier: sum
Symbol: )
Symbol: ;
Keyword: return
Number: 0
Symbol: ;
Symbol: }
